{
  "openapi": "3.0.3",
  "info": {
    "title": "Token Balance API",
    "description": "This API provides realtime balances information from accounts across different blockchains.",
    "license": {
      "name": ""
    },
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://api.dune.com/api"
    }
  ],
  "paths": {
    "/echo/beta/activity/evm/{address}": {
      "get": {
        "tags": [
          "activity"
        ],
        "summary": "Get EVM activity for a given address",
        "description": "This endpoint provides a real-time feed of on-chain activity for any EVM address. Activity is returned in chronological order (newest first) and includes native token transfers, ERC20 token transfers with metadata, ERC721 (NFT) transfers with token IDs, and contract interactions with decoded function calls.",
        "operationId": "getEvmActivity",
        "parameters": [
          {
            "name": "X-Dune-Api-Key",
            "in": "header",
            "description": "API key to access the service",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Wallet to get activity for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset to paginate through result sets. This is a cursor being passed from the previous response, only use what the backend returns here.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of activity items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityResponse"
                },
                "example": {
                  "activity": [
                    {
                      "chain_id": 8453,
                      "block_number": 26635101,
                      "block_time": "2025-02-20T13:52:29+00:00",
                      "transaction_hash": "0x184544c8d67a0cbed0a3f04abe5f958b96635e8c743c070f70e24b1c06cd1aa6",
                      "type": "receive",
                      "asset_type": "erc20",
                      "token_address": "0xf92e740ad181b13a484a886ed16aa6d32d71b19a",
                      "from": "0xd152f549545093347a162dce210e7293f1452150",
                      "value": "123069652500000000000",
                      "value_usd": 0.14017463965013963,
                      "token_metadata": {
                        "symbol": "ENT",
                        "decimals": 18,
                        "price_usd": 0.001138986230989314,
                        "pool_size": 5.2274054439382835
                      }
                    }
                  ],
                  "next_offset": "KgAAAAAAAAAweDQ4ZDAwNGE2YzE3NWRiMzMxZTk5YmVhZjY0NDIzYjMwOTgzNTdhZTdAVxVC-y0GAAUhAAAAAAAA6XCRAQAAAAAAAAAAAAAAAD0AAAAAAAAAAAAAAAAAAAA"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed data"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error - A generic error occurred on the server."
          }
        }
      }
    },
    "/echo/beta/balances/svm/{address}": {
      "get": {
        "tags": [
          "balances"
        ],
        "summary": "Get SVM token balances for a given address",
        "description": "This endpoint returns SVM token balances for an address for any token that the address has interacted with",
        "operationId": "getSvmBalances",
        "parameters": [
          {
            "name": "X-Dune-Api-Key",
            "in": "header",
            "description": "API key to access the service",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Wallet to get balances for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chains",
            "in": "query",
            "description": "Either 'all' or a comma separated list of chains to get balances for. Currently supports 'solana' and 'eclipse'",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset to paginate through result sets. This is a cursor being passed from the previous response, only use what the backend returns here.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of transactions to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalancesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed data"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error - A generic error occurred on the server."
          }
        }
      }
    },
    "/echo/beta/tokens/evm/{contract_address}": {
      "get": {
        "tags": [
          "prices"
        ],
        "summary": "Get EVM token prices for a specified contract address (or the native token), on any chain.",
        "operationId": "getEvmTokenData",
        "parameters": [
          {
            "name": "X-Dune-Api-Key",
            "in": "header",
            "description": "API key to access the service",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contract_address",
            "in": "path",
            "description": "The contract address of the token or 'native' for the native token of the chain",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chain_ids",
            "in": "query",
            "description": "Either 'all' or a comma separated list of chain ids to get balances for",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The offset to paginate through result sets; this is a cursor being passed from the previous response, only use what the backend returns here",
            "required": false,
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Maximum number of prices to return",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensResponse"
                },
                "example": {
                  "contract_address": "native",
                  "prices": [
                    {
                      "chain": "ethereum",
                      "chain_id": 1,
                      "price_usd": 12.34,
                      "symbol": "ETH"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed data"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error - A generic error occurred on the server."
          }
        }
      }
    },
    "/echo/beta/transactions/svm/{address}": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Get SVM transactions for a given address",
        "description": "This endpoint returns transactions for a given address across several SVM chains.",
        "operationId": "getSvmTransactions",
        "parameters": [
          {
            "name": "X-Dune-Api-Key",
            "in": "header",
            "description": "API key to access the service",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Wallet to get transactions for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset to paginate through result sets. This is a cursor being passed from the previous response, only use what the backend has returned on previous responses.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of transactions to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsSvmResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed data"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error - A generic error occurred on the server"
          }
        }
      }
    },
    "/echo/v1/balances/evm/chains": {
      "get": {
        "tags": [
          "balances"
        ],
        "summary": "Get a list of supported chains for the balances endpoint",
        "description": "The balances endpoint supports a wide range of chains, but not all chains are supported by all backends.\nThis endpoint returns a list of chains that are supported by the balances endpoint.",
        "operationId": "getEvmBalancesChains",
        "parameters": [
          {
            "name": "X-Dune-Api-Key",
            "in": "header",
            "description": "API key to access the service",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainsResponse"
                },
                "example": {
                  "chains": [
                    {
                      "id": 42161,
                      "name": "arbitrum",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "default",
                        "mainnet"
                      ]
                    },
                    {
                      "id": 43114,
                      "name": "avalanche_c",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "default",
                        "mainnet"
                      ]
                    },
                    {
                      "id": 8453,
                      "name": "base",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "mainnet"
                      ]
                    },
                    {
                      "id": 56,
                      "name": "bnb",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "default",
                        "mainnet"
                      ]
                    },
                    {
                      "id": 1,
                      "name": "ethereum",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "default",
                        "mainnet"
                      ]
                    },
                    {
                      "id": 137,
                      "name": "polygon",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "default",
                        "mainnet"
                      ]
                    },
                    {
                      "id": 10,
                      "name": "optimism",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "default",
                        "mainnet"
                      ]
                    },
                    {
                      "id": 534352,
                      "name": "scroll",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "mainnet"
                      ]
                    },
                    {
                      "id": 42220,
                      "name": "celo",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "default",
                        "mainnet"
                      ]
                    },
                    {
                      "id": 690,
                      "name": "redstone",
                      "supported_assets": [
                        "native"
                      ],
                      "tags": [
                        "mainnet"
                      ]
                    },
                    {
                      "id": 34443,
                      "name": "mode",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "mainnet"
                      ]
                    },
                    {
                      "id": 42170,
                      "name": "arbitrum_nova",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "default",
                        "mainnet"
                      ]
                    },
                    {
                      "id": 59144,
                      "name": "linea",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "mainnet"
                      ]
                    },
                    {
                      "id": 60808,
                      "name": "bob",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "mainnet"
                      ]
                    },
                    {
                      "id": 81457,
                      "name": "blast",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "default",
                        "mainnet"
                      ]
                    },
                    {
                      "id": 7777777,
                      "name": "zora",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "default",
                        "mainnet"
                      ]
                    },
                    {
                      "id": 666666666,
                      "name": "degen",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "mainnet"
                      ]
                    },
                    {
                      "id": 888888888,
                      "name": "ancient8",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "mainnet"
                      ]
                    },
                    {
                      "id": 1380012617,
                      "name": "rari",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "mainnet"
                      ]
                    },
                    {
                      "id": 100,
                      "name": "gnosis",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "default",
                        "mainnet"
                      ]
                    },
                    {
                      "id": 1101,
                      "name": "zkevm",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "mainnet"
                      ]
                    },
                    {
                      "id": 324,
                      "name": "zksync",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "default",
                        "mainnet"
                      ]
                    },
                    {
                      "id": 70700,
                      "name": "proof_of_play",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "mainnet"
                      ]
                    },
                    {
                      "id": 250,
                      "name": "fantom",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "mainnet"
                      ]
                    },
                    {
                      "id": 11155111,
                      "name": "sepolia",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "mainnet"
                      ]
                    },
                    {
                      "id": 1329,
                      "name": "sei",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ],
                      "tags": [
                        "mainnet"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed data"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error - A generic error occurred on the server"
          }
        }
      }
    },
    "/echo/v1/balances/evm/{address}": {
      "get": {
        "tags": [
          "balances"
        ],
        "summary": "Get EVM token balances for a given address",
        "description": "This endpoint returns EVM token balances for an address for any token that the address has interacted with",
        "operationId": "getEvmBalances",
        "parameters": [
          {
            "name": "X-Dune-Api-Key",
            "in": "header",
            "description": "API key to access the service",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Wallet to get balances for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chain_ids",
            "in": "query",
            "description": "A comma separated list of chain_ids or tags for blockchains to get balances for. Examples: chain_ids=1,8453,10, chain_ids=mainnet,testnet.  Only balances for blockchains tagged with all the specified tags are returned. Please see the response of the /chains endpoint for the tags on each blockchain.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "exclude_spam_tokens",
            "in": "query",
            "description": "Specify this to exclude spam tokens from the response",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Specify `ERC20` or `NATIVE` to get only ERC20 tokens or native assets, respectively",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "description": "A comma separated list of additional metadata fields to include for each token. Supported values: `logo`, `url`",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset to paginate through result sets. This is a cursor being passed from the previous response, only use what the backend returns here.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of transactions to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalancesResponse"
                },
                "example": {
                  "balances": [
                    {
                      "address": "native",
                      "amount": "605371497350928252303",
                      "chain": "ethereum",
                      "decimals": 18,
                      "price_usd": 3042.816964922323,
                      "symbol": "ETH",
                      "value_usd": 1842034.6622198338
                    }
                  ],
                  "next_offset": "dKMBWDLqM7vlyn5OMEXsLWp0nI4AAAABA5JLazNO7x4poVGqUwsgxgqvvIg",
                  "request_time": "2023-11-07T05:31:56Z",
                  "response_time": "2023-11-07T05:31:56Z",
                  "wallet_address": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed data"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error - A generic error occurred on the server."
          }
        }
      }
    },
    "/echo/v1/balances/evm/{address}/subscribe": {
      "get": {
        "tags": [
          "balances"
        ],
        "summary": "Subscribe to balances for a given address",
        "description": "This endpoint returns a websocket that can be used to subscribe to balances for a given address\nEvery time the API detects a token transfer to or from this address, an update will be sent.",
        "operationId": "subscribeEvmBalances",
        "parameters": [
          {
            "name": "X-Dune-Api-Key",
            "in": "header",
            "description": "API key to access the service",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Wallet to get balances for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chain_ids",
            "in": "query",
            "description": "Comma separated list of chain ids to filter by",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "101": {
            "description": "Successful Response, Connection: Upgrade to WebSocket"
          },
          "500": {
            "description": "Internal Server Error - A generic error occurred on the server."
          }
        }
      }
    },
    "/echo/v1/transactions/evm/chains": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Get a list of supported chains for the transactions endpoint",
        "description": "This endpoint returns a list of chains that are supported by the transactions endpoint.\nThe number of supported chains is currently limited, but we are working on extending support.",
        "operationId": "getEvmTransactionsChains",
        "parameters": [
          {
            "name": "X-Dune-Api-Key",
            "in": "header",
            "description": "API key to access the service",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainsResponse"
                },
                "example": {
                  "chains": [
                    {
                      "id": 8453,
                      "name": "base"
                    },
                    {
                      "id": 81457,
                      "name": "blast"
                    },
                    {
                      "id": 1,
                      "name": "ethereum"
                    },
                    {
                      "id": 42161,
                      "name": "arbitrum"
                    },
                    {
                      "id": 43114,
                      "name": "avalanche_c"
                    },
                    {
                      "id": 56,
                      "name": "bnb"
                    },
                    {
                      "id": 42220,
                      "name": "celo"
                    },
                    {
                      "id": 10,
                      "name": "optimism"
                    },
                    {
                      "id": 137,
                      "name": "polygon"
                    },
                    {
                      "id": 11155111,
                      "name": "sepolia"
                    },
                    {
                      "id": 100,
                      "name": "gnosis"
                    },
                    {
                      "id": 7777777,
                      "name": "zora"
                    },
                    {
                      "id": 59144,
                      "name": "linea"
                    },
                    {
                      "id": 250,
                      "name": "fantom"
                    },
                    {
                      "id": 1101,
                      "name": "zkevm"
                    },
                    {
                      "id": 534352,
                      "name": "scroll"
                    },
                    {
                      "id": 1329,
                      "name": "sei"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - A generic error occurred on the server"
          }
        }
      }
    },
    "/echo/v1/transactions/evm/{address}": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Get EVM transactions for a given address",
        "description": "This endpoint returns transactions for a given address across several EVM chains.\nBy setting the decode parameter you can optionally choose to get both function calls and logs decoded.",
        "operationId": "getEvmTransactions",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Wallet to get transactions for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Dune-Api-Key",
            "in": "header",
            "description": "API key to access the service",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset to paginate through result sets. This is a cursor being passed from the previous response, only use what the backend has returned on previous responses.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of transactions to return",
            "required": false,
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0
            }
          },
          {
            "name": "block_time",
            "in": "query",
            "description": "Return only transactions before this block time",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            }
          },
          {
            "name": "chain_ids",
            "in": "query",
            "description": "Comma separated list of chain ids to get transactions for",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Filter transactions to a given address",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "method_id",
            "in": "query",
            "description": "Return only transactions with this method id",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "decode",
            "in": "query",
            "description": "Return abi decoded transactions and logs",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "log_address",
            "in": "query",
            "description": "Return only transactions with this address in logs",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "topic0",
            "in": "query",
            "description": "Return only transactions with this topic0 in logs",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "min_block_number",
            "in": "query",
            "description": "Return only transactions from blocks with block number equal to or greater than this value",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponse"
                },
                "example": {
                  "next_offset": "AAYd_b6aoIAAAAABAAAAAA4KZhIAAAAAAAAAAAAAAAAAAAAE",
                  "transactions": [
                    {
                      "address": "0x7893015832ea33bbe5ca7e4e3045ec2d6a749c8e",
                      "block_hash": "0x6761509c675c0afd7737611513e39e4334c0f4ed176992d92c57d7cc296f9d58",
                      "block_number": 40517009,
                      "block_time": "2024-05-18T09:32:32+00:00",
                      "block_version": 0,
                      "chain": "Ethereum",
                      "data": "0x4e71d92d",
                      "from": "0x7893015832ea33bbe5ca7e4e3045ec2d6a749c8e",
                      "gas_price": "0x62b85e900",
                      "hash": "0x029e21354ec2afad789c5fcd24987871d832b05b4159722a731d28141c2bd00f",
                      "index": 4,
                      "max_fee_per_gas": "0x835105080",
                      "max_priority_fee_per_gas": "0x59682f00",
                      "nonce": "0xd00b000000000000",
                      "to": "0x5857019c749147eee22b1fe63500f237f3c1b692",
                      "transaction_type": "Sender",
                      "value": "0x0"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed data"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error - A generic error occurred on the server"
          }
        }
      }
    },
    "/echo/v1/transactions/evm/{address}/subscribe": {
      "get": {
        "tags": [
          "transactions"
        ],
        "operationId": "subscribeEvmTransactions",
        "parameters": [
          {
            "name": "X-Dune-Api-Key",
            "in": "header",
            "description": "API key to access the service",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Wallet to get transactions for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "101": {
            "description": "Successful Response, Connection: Upgrade to WebSocket"
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed data"
          },
          "500": {
            "description": "Internal Server Error - A generic error occurred on the server."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActivityItem": {
        "type": "object",
        "properties": {
          "chain_id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the blockchain where activity occurred"
          },
          "block_number": {
            "type": "integer",
            "format": "int64",
            "description": "Block number where activity occurred"
          },
          "block_time": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the block"
          },
          "transaction_hash": {
            "type": "string",
            "description": "Hash of the transaction"
          },
          "type": {
            "type": "string",
            "description": "Activity type: 'transfer', 'call', 'mint', 'receive', 'send', 'swap', 'approve', etc."
          },
          "asset_type": {
            "type": "string",
            "description": "Asset type: 'native', 'erc20', 'erc721', 'erc1155'"
          },
          "token_address": {
            "type": "string",
            "description": "Contract address of token (for ERC20/ERC721/ERC1155)",
            "nullable": true
          },
          "from": {
            "type": "string",
            "description": "Address initiating the activity",
            "nullable": true
          },
          "to": {
            "type": "string",
            "description": "Recipient address",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "Amount transferred (in WEI) or contract call value",
            "nullable": true
          },
          "value_usd": {
            "type": "number",
            "format": "double",
            "description": "USD value of the transaction",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Token ID (for ERC721/ERC1155 transfers)",
            "nullable": true
          },
          "spender": {
            "type": "string",
            "description": "Address being approved to spend tokens (for approve activities)",
            "nullable": true
          },
          "token_metadata": {
            "type": "object",
            "description": "Additional token information",
            "nullable": true,
            "properties": {
              "symbol": {
                "type": "string",
                "description": "Token symbol",
                "nullable": true
              },
              "decimals": {
                "type": "integer",
                "description": "Token decimals",
                "nullable": true
              },
              "name": {
                "type": "string",
                "description": "Token name",
                "nullable": true
              },
              "logo": {
                "type": "string",
                "description": "URL to token logo",
                "nullable": true
              },
              "price_usd": {
                "type": "number",
                "format": "double",
                "description": "Token price in USD",
                "nullable": true
              },
              "pool_size": {
                "type": "number",
                "format": "double",
                "description": "Token pool size",
                "nullable": true
              },
              "standard": {
                "type": "string",
                "description": "Token standard (e.g., 'erc721')",
                "nullable": true
              }
            }
          },
          "function": {
            "type": "object",
            "description": "Decoded function information (for contract calls)",
            "nullable": true,
            "properties": {
              "signature": {
                "type": "string",
                "description": "Function signature",
                "nullable": true
              },
              "name": {
                "type": "string",
                "description": "Function name",
                "nullable": true
              },
              "inputs": {
                "type": "array",
                "description": "Function parameters",
                "nullable": true,
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Parameter name"
                    },
                    "type": {
                      "type": "string",
                      "description": "Parameter type"
                    },
                    "value": {
                      "type": "string",
                      "description": "Parameter value"
                    }
                  }
                }
              }
            }
          },
          "contract_metadata": {
            "type": "object",
            "description": "Contract metadata",
            "nullable": true,
            "properties": {
              "name": {
                "type": "string",
                "description": "Contract name",
                "nullable": true
              }
            }
          },
          "from_token_address": {
            "type": "string",
            "description": "Source token address (for swaps)",
            "nullable": true
          },
          "from_token_value": {
            "type": "string",
            "description": "Source token amount (for swaps)",
            "nullable": true
          },
          "from_token_metadata": {
            "type": "object",
            "description": "Source token metadata (for swaps)",
            "nullable": true,
            "properties": {
              "symbol": {
                "type": "string",
                "nullable": true
              },
              "decimals": {
                "type": "integer",
                "nullable": true
              },
              "name": {
                "type": "string",
                "nullable": true
              },
              "logo": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "to_token_address": {
            "type": "string",
            "description": "Destination token address (for swaps)",
            "nullable": true
          },
          "to_token_value": {
            "type": "string",
            "description": "Destination token amount (for swaps)",
            "nullable": true
          },
          "to_token_metadata": {
            "type": "object",
            "description": "Destination token metadata (for swaps)",
            "nullable": true,
            "properties": {
              "symbol": {
                "type": "string",
                "nullable": true
              },
              "decimals": {
                "type": "integer",
                "nullable": true
              },
              "name": {
                "type": "string",
                "nullable": true
              },
              "logo": {
                "type": "string",
                "nullable": true
              }
            }
          }
        }
      },
      "ActivityResponse": {
        "type": "object",
        "required": [
          "activity"
        ],
        "properties": {
          "activity": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityItem"
            },
            "description": "Array of activity items"
          },
          "next_offset": {
            "type": "string",
            "nullable": true,
            "description": "Pagination cursor for the next page of results"
          }
        }
      },
      "BalanceData": {
        "type": "object",
        "required": [
          "chain",
          "address",
          "amount"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "chain": {
            "type": "string"
          },
          "chain_id": {
            "type": "integer",
            "format": "int64"
          },
          "decimals": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "low_liquidity": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "pool_size": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "price_usd": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "nullable": true
          },
          "token_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseTokenMetadata"
              }
            ],
            "nullable": true
          },
          "value_usd": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        }
      },
      "BalanceErrorInformation": {
        "type": "object",
        "required": [
          "chain_id",
          "address"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "chain_id": {
            "type": "integer",
            "format": "int64"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "BalanceErrors": {
        "type": "object",
        "properties": {
          "error_message": {
            "type": "string",
            "nullable": true
          },
          "token_errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BalanceErrorInformation"
            }
          }
        }
      },
      "BalancesResponse": {
        "type": "object",
        "required": [
          "wallet_address",
          "balances"
        ],
        "properties": {
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BalanceData"
            }
          },
          "errors": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BalanceErrors"
              }
            ],
            "nullable": true
          },
          "next_offset": {
            "type": "string",
            "nullable": true
          },
          "request_time": {
            "type": "string",
            "nullable": true
          },
          "response_time": {
            "type": "string",
            "nullable": true
          },
          "wallet_address": {
            "type": "string",
            "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
          }
        }
      },
      "Chain": {
        "type": "string",
        "enum": [
          "solana",
          "eclipse"
        ]
      },
      "ChainEntry": {
        "type": "object",
        "required": [
          "name",
          "id",
          "tags"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ChainsResponse": {
        "type": "object",
        "required": [
          "chains"
        ],
        "properties": {
          "chains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChainEntry"
            }
          }
        }
      },
      "DecodedEvent": {
        "type": "object",
        "required": [
          "name",
          "inputs"
        ],
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Input"
            }
          },
          "name": {
            "type": "string"
          }
        }
      },
      "DecodedFunction": {
        "type": "object",
        "required": [
          "name",
          "inputs"
        ],
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Input"
            }
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Input": {
        "type": "object",
        "required": [
          "name",
          "type",
          "value"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/Token"
          }
        }
      },
      "Log": {
        "type": "object",
        "required": [
          "address",
          "data",
          "topics"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Microseconds": {
        "type": "integer",
        "format": "int64"
      },
      "ResponseLog": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Log"
          },
          {
            "type": "object",
            "properties": {
              "decoded": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DecodedEvent"
                  }
                ],
                "nullable": true
              }
            }
          }
        ]
      },
      "ResponseTokenMetadata": {
        "type": "object",
        "properties": {
          "logo": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ResponseTransaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionBase"
          },
          {
            "type": "object",
            "required": [
              "chain",
              "logs"
            ],
            "properties": {
              "chain": {
                "type": "string"
              },
              "decoded": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DecodedFunction"
                  }
                ],
                "nullable": true
              },
              "logs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResponseLog"
                }
              }
            }
          }
        ]
      },
      "Token": {
        "type": "object"
      },
      "TokenData": {
        "type": "object",
        "required": [
          "chain_id",
          "chain"
        ],
        "properties": {
          "chain": {
            "type": "string"
          },
          "chain_id": {
            "type": "integer",
            "format": "int64"
          },
          "decimals": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          },
          "fully_diluted_value": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "pool_size": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "price_usd": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "nullable": true
          },
          "total_supply": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TokensResponse": {
        "type": "object",
        "description": "Response type for both price endpoints.",
        "required": [
          "contract_address",
          "tokens"
        ],
        "properties": {
          "contract_address": {
            "type": "string"
          },
          "next_offset": {
            "type": "string",
            "nullable": true
          },
          "tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenData"
            }
          }
        }
      },
      "Transaction": {
        "type": "object",
        "required": [
          "address",
          "chain",
          "block_slot",
          "raw_transaction"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "block_slot": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "block_time": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Microseconds"
              }
            ],
            "nullable": true
          },
          "chain": {
            "type": "string"
          },
          "raw_transaction": {
            "type": "object"
          }
        }
      },
      "TransactionBase": {
        "type": "object",
        "required": [
          "chain_id",
          "address",
          "block_time",
          "block_number",
          "index",
          "hash",
          "block_hash",
          "value",
          "from",
          "to",
          "nonce",
          "gas_price",
          "data"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "block_hash": {
            "type": "string"
          },
          "block_number": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "block_time": {
            "type": "string"
          },
          "chain_id": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "string",
            "format": "binary"
          },
          "effective_gas_price": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "gas_price": {
            "type": "string"
          },
          "gas_used": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "index": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "nonce": {
            "type": "string"
          },
          "success": {
            "type": "boolean",
            "nullable": true
          },
          "to": {
            "type": "string"
          },
          "transaction_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionType"
              }
            ],
            "nullable": true
          },
          "value": {
            "type": "string"
          }
        }
      },
      "TransactionType": {
        "type": "string",
        "enum": [
          "Sender",
          "Receiver"
        ]
      },
      "TransactionsResponse": {
        "type": "object",
        "required": [
          "transactions"
        ],
        "properties": {
          "next_offset": {
            "type": "string",
            "nullable": true
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseTransaction"
            }
          }
        }
      },
      "TransactionsSvmResponse": {
        "type": "object",
        "required": [
          "transactions"
        ],
        "properties": {
          "next_offset": {
            "type": "string",
            "nullable": true
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "activity",
      "description": "Activity API"
    },
    {
      "name": "balance",
      "description": "Balances API"
    },
    {
      "name": "chains",
      "description": "Chains API"
    },
    {
      "name": "transactions",
      "description": "Transactions API"
    }
  ]
}
